class CleaningManagerApp {
	constructor() { this.tasks = []; this.cleanings = []; this.currentTaskId = null; this.init(); }
	init() { this.loadData(); this.setupEventListeners(); this.setDefaultDate(); this.updateStats(); this.renderTasks(); this.renderRecentCleanings(); }
	setupEventListeners() {
		document.getElementById('addTaskBtn').addEventListener('click', () => this.showModal('taskModal'));
		document.getElementById('closeModal').addEventListener('click', () => this.hideModal('taskModal'));
		document.getElementById('closeCompletionModal').addEventListener('click', () => this.hideModal('completionModal'));
		document.getElementById('cancelTask').addEventListener('click', () => this.hideModal('taskModal'));
		document.getElementById('cancelCompletion').addEventListener('click', () => this.hideModal('completionModal'));
		document.getElementById('taskForm').addEventListener('submit', (e) => { e.preventDefault(); this.addTask(); });
		document.getElementById('completionForm').addEventListener('submit', (e) => { e.preventDefault(); this.completeTask(); });
		window.addEventListener('click', (e) => { if (e.target.classList.contains('modal')) { e.target.style.display = 'none'; }});
		if ('serviceWorker' in navigator) { navigator.serviceWorker.register('sw.js').catch(() => {}); }
	}
	setDefaultDate() { const today = new Date().toISOString().split('T')[0]; const now = new Date(); document.getElementById('taskDate').value = today; document.getElementById('completionDate').value = today; document.getElementById('completionTime').value = now.toTimeString().slice(0,5); }
	showModal(id) { document.getElementById(id).style.display = 'block'; document.body.style.overflow = 'hidden'; }
	hideModal(id) { document.getElementById(id).style.display = 'none'; document.body.style.overflow = 'auto'; }
	addTask() { const t={ id: Date.now().toString(), name: taskName.value, room: roomName.value, date: taskDate.value, price: parseFloat(taskPrice.value), notes: taskNotes.value, completed:false, createdAt: new Date().toISOString()}; this.tasks.push(t); this.saveData(); this.updateStats(); this.renderTasks(); this.hideModal('taskModal'); this.resetForm('taskForm'); this.notify('Task added successfully!','success'); }
	completeTask() { const task = this.tasks.find(x=>x.id===this.currentTaskId); if(!task) return; const c={ id: Date.now().toString(), taskId: this.currentTaskId, taskName: task.name, room: task.room, completionDate: completionDate.value, completionTime: completionTime.value, price: task.price, notes: completionNotes.value, completedAt: new Date().toISOString()}; task.completed=true; task.completedAt=c.completedAt; this.cleanings.unshift(c); this.saveData(); this.updateStats(); this.renderTasks(); this.renderRecentCleanings(); this.hideModal('completionModal'); this.resetForm('completionForm'); this.notify('Task completed successfully!','success'); }
	deleteTask(id){ if(confirm('Delete this task?')){ this.tasks=this.tasks.filter(t=>t.id!==id); this.saveData(); this.updateStats(); this.renderTasks(); this.notify('Task deleted.','info');}}
	showCompletionModal(id){ this.currentTaskId=id; this.showModal('completionModal'); }
	resetForm(id){ document.getElementById(id).reset(); this.setDefaultDate(); }
	renderTasks(){ const taskList=document.getElementById('taskList'); const today=new Date().toISOString().split('T')[0]; const list=this.tasks.filter(t=>t.date===today&&!t.completed); if(list.length===0){ taskList.innerHTML=`<div class="empty-state"><i class="fas fa-clipboard-check"></i><p>No tasks for today!</p><p>Add a new task to get started.</p></div>`; return;} taskList.innerHTML=list.map(task=>`<div class="task-item" data-task-id="${task.id}"><div class="task-header"><div class="task-name">${task.name}</div><div class="task-price">$${task.price.toFixed(2)}</div></div><div class="task-details"><div><i class="fas fa-door-open"></i> ${task.room}</div><div><i class="fas fa-calendar"></i> ${this.formatDate(task.date)}</div></div>${task.notes?`<div class="task-notes"><i class="fas fa-sticky-note"></i> ${task.notes}</div>`:''}<div class="task-actions"><button class="btn btn-success btn-sm" onclick="app.showCompletionModal('${task.id}')"><i class="fas fa-check"></i> Complete</button><button class="btn btn-danger btn-sm" onclick="app.deleteTask('${task.id}')"><i class="fas fa-trash"></i> Delete</button></div></div>`).join(''); }
	renderRecentCleanings(){ const el=document.getElementById('recentCleanings'); const list=this.cleanings.slice(0,10); if(list.length===0){ el.innerHTML=`<div class="empty-state"><i class="fas fa-broom"></i><p>No completed cleanings yet!</p><p>Complete tasks to see them here.</p></div>`; return;} el.innerHTML=list.map(c=>`<div class="cleaning-item"><div class="cleaning-header"><div class="cleaning-room">${c.room}</div><div class="cleaning-price">$${c.price.toFixed(2)}</div></div><div class="cleaning-details"><div><i class="fas fa-tasks"></i> ${c.taskName}</div><div><i class="fas fa-calendar"></i> ${this.formatDate(c.completionDate)} at ${c.completionTime}</div></div>${c.notes?`<div class="cleaning-notes"><i class="fas fa-sticky-note"></i> ${c.notes}</div>`:''}</div>`).join(''); }
	updateStats(){ const total=this.tasks.length; const completed=this.tasks.filter(t=>t.completed).length; const earnings=this.cleanings.reduce((s,c)=>s+c.price,0); totalTasks.textContent=total; completedTasks.textContent=completed; totalEarnings.textContent=`$${earnings.toFixed(2)}`; }
	formatDate(s){ const d=new Date(s); return d.toLocaleDateString('en-US',{month:'short',day:'numeric',year:'numeric'}); }
	notify(message,type='info'){ const n=document.createElement('div'); n.style.cssText=`position:fixed;top:20px;right:20px;background:${type==='success'?'#4CAF50':type==='error'?'#F44336':'#2196F3'};color:#fff;padding:1rem 1.5rem;border-radius:8px;box-shadow:0 4px 15px rgba(0,0,0,0.2);z-index:10000;transform:translateX(100%);transition:transform .3s ease;max-width:300px;`; n.innerHTML=`<div style="display:flex;gap:.5rem;align-items:center"><i class="fas fa-${type==='success'?'check-circle':type==='error'?'exclamation-circle':'info-circle'}"></i><span>${message}</span></div>`; document.body.appendChild(n); setTimeout(()=>{n.style.transform='translateX(0)';},50); setTimeout(()=>{n.style.transform='translateX(100%)'; setTimeout(()=>n.remove(),300);},3000); }
	saveData(){ try{ localStorage.setItem('cleaningTasks',JSON.stringify(this.tasks)); localStorage.setItem('cleaningCleanings',JSON.stringify(this.cleanings)); }catch(e){ this.notify('Error saving data','error'); }}
	loadData(){ try{ const t=localStorage.getItem('cleaningTasks'); const c=localStorage.getItem('cleaningCleanings'); if(t) this.tasks=JSON.parse(t); if(c) this.cleanings=JSON.parse(c);}catch(e){ this.notify('Error loading data','error'); }}
}

document.addEventListener('DOMContentLoaded',()=>{ window.app=new CleaningManagerApp(); });

